// -*- C++ -*-
/* $Id$ */

/* item.cc
 *
 * Copyright (C) 1998 EMC Capital Management Inc.
 * Developed by Havoc Pennington <hp@pobox.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

extern "C" 
{
#include <stdarg.h>
}

#include <libgnomecanvasmm/canvas.h>
#include <libgnomecanvasmm/group.h>
#include <libgnomecanvas/gnome-canvas-util.h>

namespace Gnome
{

namespace Canvas
{

//This function creates an empty va_list instead of just passing 0 to gnome_canvas_item_construct().
//This is necessary on the alpha platform.
//It needs to be a separate helper function because we need a ... argument. 
static void
item_construct_helper(GnomeCanvasItem *item, GnomeCanvasGroup *group, ...)
{
  va_list va;
  va_start(va, group);
  gnome_canvas_item_construct(item, group, 0, va);
  va_end(va);
}

void
Item::item_construct(Group& group)
{
  item_construct_helper(GNOME_CANVAS_ITEM(gobj()), group.gobj()); //With no ... arguments.
}

void
Item::item_construct(Group& group, const gchar* first_arg_name,
                                 va_list ap)
{
  gnome_canvas_item_construct(GNOME_CANVAS_ITEM(gobj()), group.gobj(),
                              first_arg_name,
                              ap);
}

void 
Item::set(const gchar* first_arg_name, ...)
{
  va_list args;
  va_start(args,first_arg_name);
  gnome_canvas_item_set_valist(gobj(), first_arg_name, args);
  va_end(args);
}

int Item::grab(unsigned int event_mask, const Gdk::Cursor& cursor, guint32 etime)
{
  return gnome_canvas_item_grab(gobj(), event_mask, const_cast<GdkCursor*>(cursor.gobj()), etime);
}

int Item::grab(unsigned int event_mask, guint32 etime)
{
  return gnome_canvas_item_grab(gobj(), event_mask, 0, etime);
}

void
Item::affine_relative(const Art::AffineTrans &affine)
{
  gnome_canvas_item_affine_relative (gobj(), affine.gobj());
}

void
Item::affine_absolute (const Art::AffineTrans &affine)
{
  gnome_canvas_item_affine_absolute (gobj(), affine.gobj());
}

Art::AffineTrans
Item::get_i2w_affine() const
{
  double tmp[6] = {0};
  
  gnome_canvas_item_i2w_affine(const_cast<GnomeCanvasItem*>(gobj()), tmp);
  return Art::AffineTrans(tmp);
}

Art::AffineTrans
Item::get_i2c_affine() const
{
  double tmp[6] = {0};
  
  gnome_canvas_item_i2c_affine(const_cast<GnomeCanvasItem*>(gobj()), tmp);
  return Art::AffineTrans(tmp);
}

Group* Item::get_parent_group()
{
  //This is implemented in C, instead of using our C++ PropertyProxy, because uses of PropertyProxy<Object*> 
  //do not compile with some versions of SUN Forte C++.

  GValue value = { 0, };
  g_value_init(&value, GNOME_TYPE_CANVAS_ITEM);
  //The property is specified as ITEM, but it's actually always a GNOME_TYPE_CANVAS_GROUP.

  g_object_get_property(G_OBJECT(gobj()), "parent", &value);

  GnomeCanvasGroup* cgroup = GNOME_CANVAS_GROUP(g_value_get_object(&value));

  return Glib::wrap(cgroup);
}

const Group* Item::get_parent_group() const
{
  Item* nonconstthis = const_cast<Item*>(this);
  return nonconstthis->get_parent_group();
}

} /* namespace Canvas */
} /* namespace Gnome */

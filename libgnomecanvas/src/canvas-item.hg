// -*- C++ -*-
/* $Id$ */

/* canvas-item.h
 * 
 * Copyright (C) 1998 EMC Capital Management Inc.
 * Developed by Havoc Pennington <hp@pobox.com>
 *
 * Copyright (C) 1999 The Gtk-- Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/object.h>

//Art:
#include <libgnomecanvasmm/point.h>
#include <libgnomecanvasmm/affinetrans.h>
#include <libgnomecanvasmm/canvas-property.h>

#include <gdkmm/cursor.h>

#include <libgnomecanvas/gnome-canvas.h>


_DEFS(libgnomecanvas,gnomecanvasitem)
_PINCLUDE(gtkmm/private/object_p.h)

namespace Gnome
{

class Canvas;
class CanvasGroup;
struct CanvasItem_private;

class CanvasItem : public Gtk::Object
{
  _CLASS_GTKOBJECT(CanvasItem, GnomeCanvasItem,
             GNOME_CANVAS_ITEM,
             Gtk::Object, GtkObject)

  friend class Gnome::CanvasHelpers::Properties;
public:
  _CTOR_CAST;
  _DTOR;

  //:  Move an item by the specified amount
  _WRAP_METHOD(void move(double dx, double dy), gnome_canvas_item_move)

  //: Raise an item in the z-order of its parent group by the specified
  //: number of positions.  If the number is zero, then the item will
  //: be made the topmost of its parent group.
  _WRAP_METHOD(void raise(int positions), gnome_canvas_item_raise)

  //: Lower an item in the z-order of its parent group by the specified
  //: number of positions.  If the number is zero, then the item will be
  //: made the bottommost of its parent group.  */
  _WRAP_METHOD(void lower(int positions), gnome_canvas_item_lower)

  //: Raise an item to the top of its parent group's z-order.
  _WRAP_METHOD(void raise_to_top(), gnome_canvas_item_raise_to_top)

  //: Lower an item to the bottom of its parent group's z-order
  _WRAP_METHOD(void lower_to_bottom(), gnome_canvas_item_lower_to_bottom)

  //: Grab the mouse for the specified item.  Only the events in
  //: event_mask will be reported.  If cursor is non-NULL, it will be
  //: used during the duration of the grab.  Time is a proper X event
  //: time parameter.  Returns the same values as XGrabPointer().
  int grab(unsigned int event_mask, const Gdk::Cursor& cursor, guint32 etime);
  int grab(unsigned int event_mask, guint32 etime);

  //: Ungrabs the mouse -- the specified item must be the same that was
  //: passed to gnome_canvas_item_grab().  Time is a proper X event
  //: time parameter. 
  _WRAP_METHOD(void ungrab(guint32 etime), gnome_canvas_item_ungrab)

  //: These functions convert from a coordinate system to another.  "w"
  //: is world coordinates and "i" is item coordinates. 
  _WRAP_METHOD(void w2i(double& x, double& y), gnome_canvas_item_w2i)
  _WRAP_METHOD(void i2w(double& x, double& y), gnome_canvas_item_i2w)

  //: Used to send all of the keystroke events to a specific item as well 
  //: as GDK_FOCUS_CHANGE events.
  _WRAP_METHOD(void grab_focus(), gnome_canvas_item_grab_focus)

  //: Fetch the bounding box of the item.  The bounding box may not be 
  //: exactly tight, but the canvas items will do the best they can.
  _WRAP_METHOD(void get_bounds(double& x1, double& y1, double& x2, double& y2) const, gnome_canvas_item_get_bounds)

  //: Make the item visible
  _WRAP_METHOD(void show(), gnome_canvas_item_show)
  
  //: Hide the item
  _WRAP_METHOD(void hide(), gnome_canvas_item_hide)

  //: Apply a relative affine transformation to the item 
  void affine_relative(const Art::AffineTrans &affine);

  //: Apply an absolute affine transformation to the item
  void affine_absolute(const Art::AffineTrans &affine);


  //  // Those are present in the header file but not in the libgnomeui library !
  //  //: Scale an item about a point by the specified factors
  //  _WRAP_METHOD(void gnome_canvas_item_scale(GnomeCanvasItem *, double,
  //                                         double, double, double),
  //           void scale(double x, double y, double scale_x, double scale_y))
  //
  //  //: Rotate an item about a point by the specified number of degrees
  //  _WRAP_METHOD(void gnome_canvas_item_rotate(GnomeCanvasItem *, double,
  //                                          double, double),
  //           void rotate(double x, double y, double angle))

  //: Gets the affine transform that converts from item-relative
  //: coordinates to world coordinates
  Art::AffineTrans get_i2w_affine() const;

  //: Gets the affine transform that converts from item-relative
  //: coordinates to canvas pixel coordinates
  Art::AffineTrans get_i2c_affine() const;
            


  //: Returns the canvas we're on.
  //TODO: problems with convert.m4: _MEMBER_GET(canvas, canvas, Gnome::Canvas*, GnomeCanvas*)

  //: Returns the parent canvas item - could be 0 for root item

  // Commented out for now, because there an interdependency with
  // Gnome::CanvasGroup which I don't know how to solve yet. - GL

  _MEMBER_GET(parent,parent,Gnome::CanvasGroup*,GnomeCanvasItem*)

  
  //: Tell the item to update itself.  The flags are from the update flags
  //: defined above.  The item should update its internal state from its
  //: queued state, recompute and request its repaint area, etc.  The
  //: affine, if used, is a pointer to a 6-element array of doubles.
  _WRAP_SIGNAL(void update(double*, ArtSVP*, int), "update")

//   //: Realize an item -- create GCs, etc. 
  _WRAP_SIGNAL(void realize(), "realize")
  
//   //: Unrealize an item 
  _WRAP_SIGNAL(void unrealize(), "unrealize")
  
//   //: Map an item - normally only need by items with their own GdkWindows 
  _WRAP_SIGNAL(void map(),"map")
  
//   //: Unmap an item 
  _WRAP_SIGNAL(void unmap(),"unmap")

//   //: Return the microtile coverage of the item
  _WRAP_SIGNAL(ArtUta* coverage(), "coverage")
  
//   //: Draw an item of this type. (x, y) are the upper-left canvas
//   //: pixel coordinates of the drawable, a temporary pixmap,
//   //: where things get drawn. (width, height) are the dimensions
//   //: of the drawable.  

  _WRAP_SIGNAL(void draw(GdkDrawable*,int,int,int,int), "draw")

//   //: Calculate the distance from an item to the specified point.  It
//   //: also returns a canvas item which is the item itself in the case
//   //: of the object being an actual leaf item, or a child in case of
//   //: the object being a canvas group. (cx, cy) are the canvas pixel
//   //: coordinates that correspond to the item-relative coordinates(x,
//   //: y). 

//   _WRAP_SIGNAL("point", vfunc,
// 	      double point(double,double,int,int,Gnome::CanvasItem**),
// 	      double point(GnomeCanvasItem*, double,double,int,int,GnomeCanvasItem**))
  
//   //: Move an item by the specified amount 
  _WRAP_SIGNAL(void translate(double, double), "translate")

//   //: Fetch the bounding box of the item
  _WRAP_SIGNAL(void bounds(double*, double*, double*, double*), "bounds", )
  
  //: Signal: an event ocurred for an item of this type.  The(x, y)
  //: coordinates are in the canvas world coordinate system.  
  _WRAP_SIGNAL(int event(GdkEvent*), "event")

protected:

  //- For class children use only
  void item_construct(CanvasGroup& group);

  //- Unsafe version - can't use a _gtk_string here, C++ doesn't like
  //- classes being passed before ellipses('...') args
  void item_construct(CanvasGroup& group, const gchar* first_arg_name,
                      va_list ap);

  //- Set arguments - For class children use only
  void set(const gchar* first_arg_name, ...);
  
};

} /* namespace Gnome */

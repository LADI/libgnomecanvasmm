/* $Id$ */

/* canvas-line.h
 * 
 * Copyright (C) 1998 EMC Capital Management Inc.
 * Developed by Havoc Pennington <hp@pobox.com>
 *
 * Copyright (C) 1999 The Gtk-- Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgnomecanvasmm/canvas-item.h>
#include <libgnomecanvasmm/canvas-property.h>
#include <libgnomecanvas/gnome-canvas-line.h>
#include <libgnomecanvas/gnome-canvas-util.h>
#include <vector>
_DEFS(libgnomecanvas,gnomecanvasline)
_PINCLUDE(libgnomecanvasmm/private/canvas-item_p.h)

#m4 include(canvas_property.m4)


namespace Gnome
{

namespace Canvas
{

class GnomeGroup;

// Sample use of Gnome_CanvasPoints :

//   Gnome_CanvasPoints points;
//  
//   points.push_back(Art::Point(0, 0));
//   points.push_back(Art::Point(100,0));
//   points.push_back(Art::Point(0,100));
//   points.push_back(Art::Point(100,100));
//
//   line = new Gnome_CanvasLine(&m_canvasgroup,points);

//using std::vector;

class Points : public std::vector<Art::Point>
{
public:
  Points(size_type nbpoints = 0);
  Points(GnomeCanvasPoints* castitem);
  ~Points();
  
  const GnomeCanvasPoints* gobj() const { return _gobj(); }
  GnomeCanvasPoints* gobj() { return _gobj(); }

protected:
  GnomeCanvasPoints* _gobj() const;
  mutable GnomeCanvasPoints* points_;
  mutable bool owned_;
};

class Line : public Item
{
  _CLASS_GTKOBJECT(Line, GnomeCanvasLine, GNOME_CANVAS_LINE, Item, GnomeCanvasItem)
public:
  Line(Group& parent);
  Line(Group& parent, const Points& points);
  _CTOR_CAST;
  _DTOR;

  CANVAS_PROPERTY(points,points,const Points&,GnomeCanvasPoints*)

  CANVAS_PROPERTY(fill_color,fill_color,const Glib::ustring&,char*)
  CANVAS_PROPERTY(fill_color,fill_color_gdk,const Gdk::Color&,GdkColor*,Gdk::Color,void*,pointer_data)
  //FIXME: fill_color_rgba?
  CANVAS_PROPERTY(fill_stipple,fill_stipple,const Glib::RefPtr<Gdk::Bitmap>&,GdkWindow*,Glib::RefPtr<Gdk::Bitmap>,void*,pointer_data)

  CANVAS_PROPERTY(width_pixels,width_pixels,guint,guint)
  CANVAS_PROPERTY(width_units,width_units,double,double)

  CANVAS_PROPERTY(cap_style,cap_style,GdkCapStyle,GdkCapStyle,GdkCapStyle,int,int_data)
  CANVAS_PROPERTY(join_style,join_style,GdkJoinStyle,GdkJoinStyle,GdkJoinStyle,int,int_data)
  CANVAS_PROPERTY(line_style,line_style,GdkLineStyle,GdkLineStyle,GdkLineStyle,int,int_data)

  CANVAS_PROPERTY(first_arrowhead,first_arrowhead,bool,gboolean,bool,int,int_data)
  CANVAS_PROPERTY(last_arrowhead,last_arrowhead,bool,gboolean,bool,int,int_data)

  CANVAS_PROPERTY(smooth,smooth,bool,gboolean,bool,int,int_data)
  CANVAS_PROPERTY(spline_step,spline_step,guint,guint,guint,guint,uint_data)

  CANVAS_PROPERTY(arrow_shape_a,arrow_shape_a,double,double,double,double,double_data)
  CANVAS_PROPERTY(arrow_shape_b,arrow_shape_b,double,double,double,double,double_data)
  CANVAS_PROPERTY(arrow_shape_c,arrow_shape_c,double,double,double,double,double_data)
};

} /* namespace Canvas */
} /* namespace Gnome */


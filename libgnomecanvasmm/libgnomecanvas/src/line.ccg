/* $Id: line.ccg,v 1.5 2002/05/07 12:38:59 aholzmann Exp $ */

/* line.ccg
 *
 * Copyright (C) 1998 EMC Capital Management Inc.
 * Developed by Havoc Pennington <hp@pobox.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

//#include <libgnomecanvasmm/group.h>

namespace Gnome
{

namespace Canvas
{

Points::Points(size_type nbpoints)
: std::vector<Art::Point>(nbpoints), points_(0), owned_(false)
{}

Points::Points(GnomeCanvasPoints *castitem)
: points_(castitem),owned_(false)
{
  reserve(points_->num_points);

  //GnomeCanvasPoints has an array of doubles, used 2 at a time:
  int i = 0;
  for(iterator it = begin(); i < points_->num_points; i += 2, ++it)
  {
    (*it).set_x(points_->coords[i]);
    (*it).set_y(points_->coords[i+1]);
  }
}

Points::~Points()
{
  if (owned_ && points_)
    gnome_canvas_points_free(points_);
}

Points::operator bool() const
{
  return (!is_null());
}

bool Points::is_null() const
{
  return size() == 0;
}

GnomeCanvasPoints* Points::_gobj() const
{
  int i = 0;
  
  if(!points_)
  {
    points_ = gnome_canvas_points_new(size());
    owned_ = true;
  }
  else if(size() != static_cast<unsigned int>(points_->num_points))
  {
    if (owned_)
     gnome_canvas_points_free(points_);

    points_ = gnome_canvas_points_new(size());
    owned_ = true;
  }
  
  for(const_iterator it = begin(); it != end(); ++it, i+=2)
  {
    points_->coords[i] = (*it).get_x();
    points_->coords[i+1] = (*it).get_y();
  }

  return points_;
}


Line::Line(Group& parentx)
  : Item(GNOME_CANVAS_ITEM(g_object_new(get_type(),0)))
{
  item_construct(parentx);
}

Line::Line(Group& parentx, const Points& points)
  : Item(GNOME_CANVAS_ITEM(g_object_new(get_type(),0)))
{
  item_construct(parentx);
  property_points().set_value(points);
}

} /* namespace Canvas */
} /* namespace Gnome */


// static
GType Glib::Value<Gnome::Canvas::Points>::value_type()
{
  return Gnome::Canvas::Points::get_type();
}
